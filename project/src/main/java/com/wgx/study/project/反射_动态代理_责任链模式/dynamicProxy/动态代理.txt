动态代理模式
https://cloud.tencent.com/developer/article/1461796
1、概念及作用：
   在程序运行过程中动态地生成代理对象来代理真实对象，从而控制真实对象的访问。
   代理的作用就是在访问真实对象之前或者之后加入相应的逻辑，或者根据其他规则控制是否使用真实对象。
2、动态代理的实现：
   必须分为两个步骤
   (1)代理对象和真实对象建立代理关系
   (2)实现代理对象的代理逻辑方法
责任链模式
1、概念及作用：
   当一个对象在一条链上被多个拦截器拦截处理(拦截器也可以选择不拦截处理它)时，我们把这样的设计模式成为责任链模式。(例如SpringCloud中的zuul网关过滤器)


Mybatis动态代理的实现原理：
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream("mybatis-config.xml"));
                         ↓
                  XMLConfigBuilder：读取配置文件，解析mybatis-config.xml配置文件中的配置标签
                  XMLMapperBuilder：读取映射文件，解析XxxMapper.xml(映射文件)中的SQL标签<insert>&<update>&<delete>&<select> -> MappedStatement(封装用于执行的SQL语句、参数、返回值)
                                    核心方法：parse();内部调用核心方法：
                                              (1)configurationElement(XNode context);//将映射文件中的SQL标签解析成MappedStatement对象并保存到Configuration类中的mappedStatements属性中(mappedStatements：Map<String,MapperStatement>：key:XxxMapper的全路径(namespace) + 标签元素id)
                                              (2)bindMapperForNamespace();//通过反射获取namespace属性值(Mapper接口全路径)对应的Class对象，并调用MapperRegistry对象的addMapper方法
                                                 MapperRegistry类中维护着两个属性：config(Configuration)和knownMappers(Map<Class<?>, MapperProxyFactory<?>>)
                                                 addMapper(Class<T> type);//为Class对象绑定一个Mapper代理对象工厂MapperProxyFactory，并添加到knownMappers属性中
                                                 getMapper(Class<T> type, SqlSession sqlSession);//根据Class对象的类型从knownMappers中获取指定的代理对象工厂，通过代理对象工厂生成MapperProxy对象(实现了InvocationHandler接口，代理方法逻辑)，
                                                                                                 //然后再通过Proxy.newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h);生成代理对象并返回(JDK动态代理)。
                        ↓
                  Configuration
                        ↓
                 SqlSessionFactory
                        ↓ SqlSession sqlSession = sqlSessionFactory.openSession();
                    SqlSession
                        ↓ sqlSession.getMapper(Mapper接口.class) -> 调用MapperRegistry对象的getMapper方法，获取Mapper接口的代理对象(原理见上)
               XxxMapper接口代理对象
                        ↓
Mapper接口的代理对象调用方法 -> 调用MapperProxy类的invoke方法 -> MapperMethod：execute(SqlSession sqlSession, Object[] args); -> SqlSession对象调用insert/update/delete/select方法 -> 通过key从Configuration中获取指定的MapperStatement对象 -> 传递参数，发送SQL语句到数据库，处理返回的行数或结果集


*在使用SpringBoot时，Mybatis会在服务启动时通过启动类上的@MapperScan注解扫描指定包下的所有XxxMapper接口，以及扫描配置文件中指定路径下的所有的XxxMapper.xml文件并自动完成上述操作





