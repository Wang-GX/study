动态代理模式
https://cloud.tencent.com/developer/article/1461796
1、概念及作用：
   在程序运行过程中动态地生成代理对象来代理真实对象，从而控制真实对象的访问。
   代理的作用就是在访问真实对象之前或者之后加入相应的逻辑，或者根据其他规则控制是否使用真实对象。
2、动态代理的实现：
   必须分为两个步骤
   (1)代理对象和真实对象建立代理关系
   (2)实现代理对象的代理逻辑方法
责任链模式
1、概念及作用：
   当一个对象在一条链上被多个拦截器拦截处理(拦截器也可以选择不拦截处理它)时，我们把这样的设计模式成为责任链模式。(例如SpringCloud中的zuul网关过滤器)


Mybatis动态代理的实现原理：
                  XMLConfigBuilder：解析mybatis配置文件、解析XxxMapper.xml中的标签 -> MappedStatement(封装用于执行的SQL语句、参数、返回值)
                        ↓Map<String,MapperStatement>：key:XxxMapper的全路径(namespace) + 标签元素id
                  Configuration
                        ↓
                 SqlSessionFactory
                        ↓
                    SqlSession
                        ↓getMapper(Mapper接口.class) -> MapperProxyFactory -> MapperProxy(实现了InvocationHandler接口，说明是实现动态代理的配置类) -> 返回Mapper接口的代理对象

Mapper接口的代理对象调用方法 -> MapperProxy类的invoke方法 -> MapperMethod类的execute方法(SqlSession sqlSession, Object[] args) -> SqlSession对象调用insert/update/delete/select方法 -> 通过key从Configuration中获取指定的MapperStatement对象 -> 传递参数，发送SQL语句到数据库，封装返回值





