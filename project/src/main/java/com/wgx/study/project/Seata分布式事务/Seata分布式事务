Seata分布式事务(分布式事务解决方案)
1、结构：
(1)事务协调器(TC)：事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚
   注意：TC是一个需要单独启动的服务(事务注册中心，参考Eureka)，并且需要在配置文件中指定服务的地址
(2)事务管理器(TM)：控制全局事务的边界，负责开启一个全局事务，并最终(向TC)发起全局提交或全局回滚的决议
(3)资源管理器(RM)：控制分支
(本地)事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支事务的提交和回滚
2、流程：
(1)TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的事务id(XID)，XID由TC维护
(2)XID在微服务调用链路的上下文中传播
(3)RM向TC注册分支事务，将其纳入XID对应的全局事务的管辖
(4)TM向TC发起针对XID的全局提交或回滚决议
(5)TC调度XID下管辖的全部分支事务完成或回滚请求
3、Seata与XA的区别：
Seata和XA的机制都是2PC(两阶段提交)，但是XA两阶段(准备阶段和提交阶段)都会锁资源，而Seata只锁第一阶段，因此Seata的资源锁定时间稍短。 TODO XA与两阶段提交
Seata的协议机制总体上看与XA是一致的，但是是有差别的。
XA方案的RM实际上是在数据库层，RM本质上就是数据库自身(通过提供支持XA的驱动程序来供应用使用)。
而Seata的RM是以二方包的形式作为中间件层部署在应用程序这一侧的，不依赖于数据库本身对协议的支持，当然也不需要数据库支持XA协议。
这点对于微服务化的架构来说是非常重要的，应用层不需要为本地事务和分布式事务两类不同场景来适配两套不同的数据库驱动。这个设计，剥离了分布式事务方案对数据库在协议支持上的要求。
4、示例(TODO 此处存在疑问，先略过)：
微服务1：获取本地锁->更新数据库->提交前获取全局锁->提交本地事务，释放本地锁
         (1)收到全局提交的通知，释放全局锁
         (2)收到全局回滚的通知，重新获取该数据的本地锁，进行反向补偿的更新操作，实现本地事务的回滚
微服务2：获取本地锁->更新数据库->提交前获取全局锁(失败)->自旋
         (1)获取全局锁(成功)->提交本地事务，释放本地锁
         (2)等待全局锁超时，放弃全局锁，回滚本地事务，释放本地锁
如果没有全局提交，那么全局锁始终不会释放，知道其他服务获取全局锁超时自动回滚。
TODO 1：如果此时持有全局锁的服务提交怎么办？最终服务1会收到全局回滚的通知，进行回滚，保证最终一致性 2：为什么微服务1会提交本地事务？
5、环境搭建
(1)部署Seata Server
   修改配置文件registry.conf，设置注册中心类型及中心地址，启动Seata服务。默认端口为8091

