关于Mybatis缓存(特指Select)

(1) 配置：
Mybatis的缓存配置如下：
mybatis.configuration.cache-enabled=true(默认为true)
在缓存开启的情况下，一级缓存默认生效

(2) 一级缓存和二级缓存(注意：缓存的是查询结果而不是SQL语句)
一级缓存：
sqlSession级别的缓存，同一个sqlSession对象执行相同的查询语句只会发送一次SQL语句到数据库。
第一次执行后，将查询结果返回的Java对象序列化保存在磁盘上，之后这个sqlSession对象再执行相同的查询语句时，会直接从缓存中返回结果，而不是再查询一次数据库。
一但这个对象sqlSession对数据库进行了update操作(默认insert/update/delete语句的flushCache="true")，或者这个sqlSession的生命周期结束，那么它对应的一级缓存就会被清空。
注意：如果使用的是接口的动态代理对象去调用方法执行SQL，那么每次执行都是一个不同的sqlSession对象。

二级缓存：
同一个Mapper接口的动态代理对象(如果使用@Autowired注入就是同一个)执行相同的查询语句只会发送一次SQL语句到数据库。
二级缓存同样会被清空，触发条件和一级缓存一致。
注意：

二级缓存的开启方式：
    (1)Mybatis缓存配置开启(默认开启)
    (2)对应的Mapper映射文件中添加<cache/>标签
    (3)对应的实体类实现可序列化接口

为什么在项目中很少开启二级缓存？
通常使用Mapper接口的动态代理对象执行SQL语句，如果在两次相同的查询中数据表中的数据被修改，那么将会导致查询结果错误!
如果某个Mapper接口对应的数据表中的数据真的很少被修改并且这些数据需要频繁进行查询，那么就可以对这个Mapper开启二级缓存。

注意：在开启缓存的情况下，如果想要让某一条查询SQL语句不使用缓存，那么只需要在它的<select> 标签中添加useCache="false"(默认为true)，此设置对一级缓存和二级缓存均有效。