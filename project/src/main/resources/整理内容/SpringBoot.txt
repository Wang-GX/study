Spring的配置bean有几种方式：
(1) 属性类：通过前缀或注解读取Spring应用上下文注入属性值，配置类：读取属性类，配置bean对象并通过@Bean注入IOC容器(官方)
(2) 配置类：通过前缀或注解读取Spring应用上下文注入属性值，配置bean对象并通过@Bean注入IOC容器(本项目中为了方便采取了这种方式)
TODO 属性类和配置类必须同时生效才能够正确地将bean对象通过@Bean注解注入到IOC容器中

autoconfigure:由继承SpringBoot父工程引入的
里面有很多默认的配置类，配置类对象生效是由条件的，引入某些对应的class时才会激活(具体看源码)
RabbitProperties
        ↓
RabbitAutoConfiguration
可以通过这两个类研究

SpringBoot自动配置相关注解：

属性类相关注解：
类：
@ConfigurationProperties(prefix = "spring.rabbitmq")：属性类声明，不会声明为bean。通过前缀读取Spring应用上下文注入对应的属性值。
    TODO 注意：如果属性类只有这个注解不会作为bean被扫描到IOC容器中，两种方式：
    (1) 在属性类上添加@Component或其衍生注解
    (2) 在其他类(如配置类)上添加@EnableConfigurationProperties(XXX.class)注解，XXX类才会被IOC容器加载(官方)

配置类相关注解：
类：
@Configuration：配置类声明，同时声明为bean
@EnableConfigurationProperties(XXX.class)：表示读取某个属性类
@ConditionalOnClass(XXX.class)：判断当前项目有没有XXX这个类【【是没有还是没有被加入IOC容器】】。如果存在，则条件成立，当前配置类生效(加载到IOC容器中)

方法：
@ConditionalOnProperty(prefix = "spring.rabbitmq", value = "dynamic", matchIfMissing = true)：判断配置文件中是否存在spring.http.encoding.enabled配置，matchIfMissing = true表示如果没有配置spring.http.encoding.enabled，满足condition条件，生效

//@Configuration(proxyBeanMethods = false)：TODO?
//@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)：判断当前应用是否是web应用。如果是，当前配置类生效(加载到IOC容器中)


@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)：判断配置文件中是否存在spring.http.encoding.enabled配置，matchIfMissing = true表示如果没有配置spring.http.encoding.enabled，满足condition条件，生效 TODO 存在问题，与描述不符
@ConditionalOnMissingBean：如果当前项目中没有这个bean(没有被初始化、未被加入到IOC容器中)，则执行方法初始化这个bean，将其加入到IOC容器中，@ConditionalOnMissingBean是判断这个类是否已经初始化了(是否已经加入到IOC容器中)


在SpringBoot自动配置中，【当引入对应的启动器后，SpringBoot依赖中对应的属性类和配置类才会被激活，通过@Bean注解将生成的核心对象注入IOC容器。】
这些属性类和配置类是由SpringBoot支持的，在SpringBoot的依赖中，而不在启动器依赖中，例如RabbitMQ。
而有些是不被SpringBoot官方支持的自动配置，如Mybatis，那么SpringBoot的依赖中就没有它的属性类和配置类，因此Mybatis的启动器依赖中额外引入了针对Mybatis的属性类和配置类。最终达到的效果是一样的。